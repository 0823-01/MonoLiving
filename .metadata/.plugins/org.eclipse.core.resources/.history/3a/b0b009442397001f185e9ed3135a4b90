package com.kh.common;

import java.io.FileInputStream;
import java.io.IOException;
import java.sql.*;
import java.util.Properties;

public class JDBCTemplate {

    // 1. Connection 객체 생성 후 해당 Connection 객체를 반환하는 메소드
    public static Connection getConnection() {
        Properties prop = new Properties();
        String path = "/sql/driver/driver.properties";
        String fileName = JDBCTemplate.class.getResource(path).getPath();

        try {
            prop.load(new FileInputStream(fileName));
        } catch (IOException e) {
            e.printStackTrace();
            return null; // 오류 발생 시 null 반환
        }

        Connection conn = null;
        try {
            // JDBC Driver 등록
            Class.forName(prop.getProperty("driver"));
            // DB 접속 정보로 Connection 객체 생성
            conn = DriverManager.getConnection(
                    prop.getProperty("url"),
                    prop.getProperty("username"),
                    prop.getProperty("password")
            );
            conn.setAutoCommit(false); // 자동 커밋 해제
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }

        return conn; // 생성된 Connection 반환
    }

    // 2_1. 전달받은 Connection 객체로 commit 수행
    public static void commit(Connection conn) {
        try {
            if (conn != null && !conn.isClosed()) {
                conn.commit();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // 2_2. 전달받은 Connection 객체로 rollback 수행
    public static void rollback(Connection conn) {
        try {
            if (conn != null && !conn.isClosed()) {
                conn.rollback();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // 3_1. Connection 객체 반납 메소드
    public static void close(Connection conn) {
        try {
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // 3_2. (Prepared)Statement 객체 반납 메소드
    public static void close(Statement stmt) {
        try {
            if (stmt != null && !stmt.isClosed()) {
                stmt.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // 3_3. ResultSet 객체 반납 메소드
    public static void close(ResultSet rset) {
        try {
            if (rset != null && !rset.isClosed()) {
                rset.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
