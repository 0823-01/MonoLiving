package com.kh.order.controller;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.UUID;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import com.kh.common.JDBCTemplate;
import com.kh.member.model.vo.Member;

@WebServlet("/kakaoPayResult")
public class KakaoPayResultController extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();

        // 배송 요청 사항 가져오기
        String deliveryRequest = (String) session.getAttribute("delivery_request");
        if (deliveryRequest == null) {
            deliveryRequest = "배송 요청 사항이 없습니다.";
        }

        request.setCharacterEncoding("UTF-8");
        response.setContentType("text/html; charset=UTF-8");

        // 결제 정보 가져오기
        String tid = (String) session.getAttribute("tid");
        String pg_token = request.getParameter("pg_token");

        Member loginUser = (Member) session.getAttribute("loginUser");
        String userId = (loginUser != null) ? loginUser.getUserId() : null;

        // 총 금액 처리
        String totalPriceStr = request.getParameter("totalPrice");
        int totalPrice = 0;
        if (totalPriceStr != null) {
            try {
                totalPrice = Integer.parseInt(totalPriceStr);
            } catch (NumberFormatException e) {
                response.getWriter().println("총 금액 형식이 잘못되었습니다.");
                return;
            }
        }

        String apiUrl = "https://kapi.kakao.com/v1/payment/approve";
        String adminKey = "3cf90ec67e8e09bae787a5b2e11a21f0"; // 카카오 관리자 키
        HttpURLConnection conn = null;
        Connection dbConn = null;

        try {
            // 카카오 결제 승인 요청
            URL url = new URL(apiUrl);
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Authorization", "KakaoAK " + adminKey);
            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");

            String params = "cid=TC0ONETIME" +
                    "&tid=" + tid +
                    "&partner_order_id=order_id_1234" + // 실제 주문 ID로 교체 필요
                    "&partner_user_id=" + userId +
                    "&pg_token=" + pg_token;

            conn.setDoOutput(true);
            try (DataOutputStream dos = new DataOutputStream(conn.getOutputStream())) {
                dos.writeBytes(params);
                dos.flush();
            }

            int responseCode = conn.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                InputStream is = conn.getInputStream();
                BufferedReader br = new BufferedReader(new InputStreamReader(is, "UTF-8"));
                StringBuilder sb = new StringBuilder();
                String line;
                while ((line = br.readLine()) != null) {
                    sb.append(line);
                }
                br.close();

                JSONParser parser = new JSONParser();
                JSONObject responseJson = (JSONObject) parser.parse(sb.toString());

                // 결제 금액 가져오기
                JSONObject amountJson = (JSONObject) responseJson.get("amount");
                if (amountJson != null) {
                    Long totalAmount = (Long) amountJson.get("total");
                    // 결제 성공 확인
                    String paymentStatus = (String) responseJson.get("status");
                    if ("completed".equals(paymentStatus)) {
                        // 데이터베이스에 결제 정보 저장
                        dbConn = JDBCTemplate.getConnection();
                        dbConn.setAutoCommit(false); // 자동 커밋 끄기

                        try (PreparedStatement pstmt = dbConn.prepareStatement(
                                "INSERT INTO PAYMENT_INFO (ID, tid, pg_token, user_id, payment_status, amount) " +
                                "VALUES (payment_info_seq.NEXTVAL, ?, ?, ?, ?, ?)")) {
                            pstmt.setString(1, tid);
                            pstmt.setString(2, pg_token);
                            pstmt.setString(3, userId);
                            pstmt.setString(4, "SUCCESS");
                            pstmt.setLong(5, totalAmount);

                            int rowsAffected = pstmt.executeUpdate();
                            if (rowsAffected > 0) {
                                // 결제 정보 저장 성공
                                JDBCTemplate.commit(dbConn); // 커밋
                                // 이후 주문 정보 저장 로직...
                            } else {
                                JDBCTemplate.rollback(dbConn); // 롤백
                                response.getWriter().println("결제 정보 저장 중 오류가 발생했습니다.");
                            }
                        } catch (SQLException e) {
                            JDBCTemplate.rollback(dbConn); // 롤백
                            response.getWriter().println("SQL 오류 발생: " + e.getMessage());
                        } finally {
                            if (dbConn != null) {
                                dbConn.setAutoCommit(true); // 자동 커밋 다시 켜기
                            }
                        }
                    } else {
                        response.getWriter().println("결제가 완료되지 않았습니다. 상태: " + paymentStatus);
                    }
                } else {
                    response.getWriter().println("결제 금액을 가져오는 데 실패했습니다. 응답: " + responseJson.toString());
                }
            } else {
                // 오류 응답 처리
                response.getWriter().println("결제 승인 요청 중 오류가 발생했습니다. 응답 코드: " + responseCode);
            }
        } catch (Exception e) {
            e.printStackTrace(response.getWriter());
            response.getWriter().println("오류 발생: " + e.getMessage());
        } finally {
            if (conn != null) {
                conn.disconnect(); // 연결 해제
            }
        }

        // JSP 포워딩
        RequestDispatcher dispatcher = request.getRequestDispatcher("/views/kakaoPaypaySuccess.jsp");
        dispatcher.forward(request, response);
    }
}
