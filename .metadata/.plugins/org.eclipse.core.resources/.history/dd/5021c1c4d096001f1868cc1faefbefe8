package com.kh.order.controller;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.UUID;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import com.kh.common.JDBCTemplate;
import com.kh.member.model.vo.Member;

@WebServlet("/kakaoPayResult")
public class KakaoPayResultController extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        String deliveryRequest = (String) session.getAttribute("delivery_request");
        if (deliveryRequest == null) deliveryRequest = "배송 요청 사항이 없습니다.";

        request.setCharacterEncoding("UTF-8");
        response.setContentType("text/html; charset=UTF-8");

        String tid = (String) session.getAttribute("tid");
        String pg_token = request.getParameter("pg_token");
        Member loginUser = (Member) session.getAttribute("loginUser");
        String userId = (loginUser != null) ? loginUser.getUserId() : null;
        int totalPrice = Integer.parseInt(request.getParameter("totalPrice"));

        String apiUrl = "https://kapi.kakao.com/v1/payment/approve";
        String adminKey = "3cf90ec67e8e09bae787a5b2e11a21f0";
        HttpURLConnection conn = null;
        Connection dbConn = null;

        try {
            URL url = new URL(apiUrl);
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Authorization", "KakaoAK " + adminKey);
            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");

            String params = "cid=TC0ONETIME&tid=" + tid + "&partner_order_id=order_id_1234" +
                            "&partner_user_id=" + userId + "&pg_token=" + pg_token;
            conn.setDoOutput(true);
            try (DataOutputStream dos = new DataOutputStream(conn.getOutputStream())) {
                dos.writeBytes(params);
                dos.flush();
            }

            int responseCode = conn.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                dbConn = JDBCTemplate.getConnection();
                dbConn.setAutoCommit(false);

                try (PreparedStatement pstmt = dbConn.prepareStatement(
                    "INSERT INTO PAYMENT_INFO (ID, tid, pg_token, user_id, payment_status, amount) VALUES (payment_info_seq.NEXTVAL, ?, ?, ?, ?, ?)")) {
                    pstmt.setString(1, tid);
                    pstmt.setString(2, pg_token);
                    pstmt.setString(3, userId);
                    pstmt.setString(4, "SUCCESS");
                    pstmt.setLong(5, totalPrice);
                    pstmt.executeUpdate();
                    dbConn.commit();

                    RequestDispatcher dispatcher = request.getRequestDispatcher("/views/kakaoPaySuccess.jsp");
                    dispatcher.forward(request, response);
                } catch (SQLException e) {
                    dbConn.rollback();
                    e.printStackTrace();
                    response.getWriter().println("DB 저장 중 오류 발생: " + e.getMessage());
                } finally {
                    if (dbConn != null) dbConn.setAutoCommit(true);
                }
            } else {
                response.getWriter().println("카카오 결제 승인 요청 실패. 응답 코드: " + responseCode);
            }
        } catch (Exception e) {
            e.printStackTrace();
            response.getWriter().println("오류 발생: " + e.getMessage());
        } finally {
            if (conn != null) conn.disconnect();
        }
    }
}
