package com.example.shoppingMall.controller;

import com.example.shoppingMall.util.JDBCTemplate;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.sql.*;
import java.util.UUID;

@WebServlet("/kakaoPayResult")
public class KakaoPayResultController extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        response.setContentType("text/html; charset=UTF-8");

        HttpSession userSession = request.getSession();
        String deliveryRequest = (String) userSession.getAttribute("delivery_request");
        if (deliveryRequest == null) {
            deliveryRequest = "배송 요청 사항이 없습니다.";
        }

        String tid = (String) userSession.getAttribute("tid");
        String pg_token = request.getParameter("pg_token");
        Member loginUser = (Member) userSession.getAttribute("loginUser");

        String userId = (loginUser != null) ? loginUser.getUserId() : null;
        String phone = (loginUser != null) ? loginUser.getPhone() : null;
        String address = (loginUser != null) ? loginUser.getAddress() : null;
        String recipient = (loginUser != null) ? loginUser.getUserName() : null;

        String totalPriceStr = request.getParameter("totalPrice");
        int totalPrice = 0;
        if (totalPriceStr != null) {
            try {
                totalPrice = Integer.parseInt(totalPriceStr);
            } catch (NumberFormatException e) {
                response.getWriter().println("총 금액 형식이 잘못되었습니다.");
                return;
            }
        }

        if (tid != null && pg_token != null && userId != null && phone != null) {
            HttpURLConnection conn = null;
            Connection dbConn = null;
            String apiUrl = "https://kapi.kakao.com/v1/payment/approve";
            String adminKey = "3cf90ec67e8e09bae787a5b2e11a21f0";

            try {
                URL url = new URL(apiUrl);
                conn = (HttpURLConnection) url.openConnection();
                conn.setRequestMethod("POST");
                conn.setRequestProperty("Authorization", "KakaoAK " + adminKey);
                conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");

                String params = "cid=TC0ONETIME" +
                        "&tid=" + tid +
                        "&partner_order_id=order_id_1234" +
                        "&partner_user_id=" + userId +
                        "&pg_token=" + pg_token;

                conn.setDoOutput(true);
                try (DataOutputStream dos = new DataOutputStream(conn.getOutputStream())) {
                    dos.writeBytes(params);
                    dos.flush();
                }

                int responseCode = conn.getResponseCode();
                if (responseCode == HttpURLConnection.HTTP_OK) {
                    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"));
                    StringBuilder sb = new StringBuilder();
                    String line;
                    while ((line = br.readLine()) != null) {
                        sb.append(line);
                    }
                    br.close();

                    JSONParser parser = new JSONParser();
                    JSONObject responseJson = (JSONObject) parser.parse(sb.toString());
                    JSONObject amountJson = (JSONObject) responseJson.get("amount");
                    Long totalAmount = (amountJson != null) ? (Long) amountJson.get("total") : null;

                    if (totalAmount != null) {
                        dbConn = JDBCTemplate.getConnection();
                        String paycode = UUID.randomUUID().toString();

                        try (PreparedStatement orderStmt = dbConn.prepareStatement(
                                "INSERT INTO ORDERS (ORDER_NO, USER_ID, TOTAL_PRICE, RECIPIENT, ADDRESS, PHONE, STATUS, PAY_CODE, RES_REQUIREMENT, ORDER_ENFORLL) " +
                                "VALUES (orders_seq.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, sysdate)")) {
                            orderStmt.setString(1, userId);
                            orderStmt.setLong(2, totalPrice);
                            orderStmt.setString(3, recipient);
                            orderStmt.setString(4, address);
                            orderStmt.setString(5, phone);
                            orderStmt.setString(6, "1"); // 상태 "1"로 설정
                            orderStmt.setString(7, paycode);
                            orderStmt.setString(8, deliveryRequest);

                            int orderRowsAffected = orderStmt.executeUpdate();
                            if (orderRowsAffected > 0) {
                                JDBCTemplate.commit(dbConn);
                                response.getWriter().println("주문 정보가 orders 테이블에 저장되었습니다.");
                            } else {
                                JDBCTemplate.rollback(dbConn);
                                response.getWriter().println("주문 정보 저장 중 오류가 발생했습니다.");
                            }
                        } catch (SQLException e) {
                            e.printStackTrace(response.getWriter());
                            JDBCTemplate.rollback(dbConn);
                            response.getWriter().println("SQLException: " + e.getMessage());
                        }
                    } else {
                        response.getWriter().println("결제 금액을 가져오는 데 실패했습니다.");
                    }
                } else {
                    response.getWriter().println("결제 승인 요청 중 오류가 발생했습니다. 응답 코드: " + responseCode);
                }
            } catch (Exception e) {
                e.printStackTrace(response.getWriter());
            } finally {
                if (conn != null) {
                    conn.disconnect();
                }
                if (dbConn != null) {
                    try {
                        dbConn.close();
                    } catch (SQLException e) {
                        e.printStackTrace(response.getWriter());
                    }
                }
            }
        } else {
            response.getWriter().println("필수 매개변수가 없습니다.");
        }
    }
}
